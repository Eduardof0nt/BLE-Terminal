{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nclass BluetoothService {\n  constructor(requiredModulesService) {\n    this.requiredModulesService = requiredModulesService;\n    this.getOsAsObservable = this.requiredModulesService.os.platform;\n    // serial = this.requiredModulesService.serial;\n    this.ble = this.requiredModulesService.ble;\n    this.bluetoothDevices = {};\n    let aux_this = this;\n    this.setBLEScanning();\n    this.deletePool();\n    this.ble.on('stateChange', function (state) {\n      if (state === 'poweredOn') {\n        aux_this.ble.startScanning([], true);\n      } else {\n        console.log('Stopped');\n        aux_this.ble.stopScanning();\n      }\n    });\n  }\n  deletePool() {\n    for (let key in this.bluetoothDevices) {\n      if (Date.now() - this.bluetoothDevices[key].time > 4000) {\n        delete this.bluetoothDevices[key];\n      }\n    }\n    // console.log(this.bluetoothDevices);\n    setTimeout(() => {\n      this.deletePool();\n    }, 500);\n  }\n  setBLEScanning() {\n    let aux_this = this;\n    this.ble.on('discover', function (peripheral) {\n      aux_this.getPeripheral(peripheral);\n    });\n    this.ble.on('scanStop', function () {\n      //aux_this.ble.stopScanning();\n      console.log(aux_this.bluetoothDevices);\n    });\n    aux_this.bluetoothDevices = {};\n    aux_this.ble.startScanning();\n  }\n  getPeripheral(peripheral) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var advertisement = peripheral.advertisement;\n      var localName = advertisement.localName;\n      var txPowerLevel = advertisement.txPowerLevel;\n      var serviceUuids = advertisement.serviceUuids;\n      if (localName != undefined && serviceUuids != undefined) {\n        if (serviceUuids.includes('6e400001b5a3f393e0a9e50e24dcca9e')) {\n          _this.bluetoothDevices[peripheral.id] = {\n            name: localName,\n            id: peripheral.id,\n            peripheral,\n            serviceUuids,\n            time: Date.now()\n          };\n        }\n      }\n    })();\n  }\n  // async callCLICommand(command: string) {\n  //   return new Promise((resolve, reject) => {\n  //     this.requiredModulesService.child_process.exec(\n  //       command,\n  //       (error: Error, stdout: string, stderr: string) => {\n  //         if (error) {\n  //           console.log(`error: ${error.message}`);\n  //           reject(error);\n  //         }\n  //         if (stderr) {\n  //           console.log(`stderr: ${stderr}`);\n  //           reject(stderr);\n  //         }\n  //         resolve(stdout);\n  //       }\n  //     );\n  //   });\n  // }\n  getBluetoothDevices() {\n    // let platform = this.getOsAsObservable();\n    // let response: any[] = [];\n    // if (platform === 'darwin') {\n    //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n    //     // console.log(data);\n    //     let lines = data.split('\\n');\n    //     for (let index = 0; index < lines.length; index++) {\n    //       let address = '';\n    //       let name = '';\n    //       let connected = false;\n    //       const element = lines[index];\n    //       if (element != '') {\n    //         address = element.split(',')[0].split('address: ')[1];\n    //         name = element.split(', name: \"')[1].split('\", ')[0];\n    //         connected =\n    //           element.split(', ')[1].split(', ')[0] != 'not connected';\n    //         response.push({ address, name, connected });\n    //       }\n    //     }\n    //   });\n    //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n    //     let lines: string[] = data.split('\\n');\n    //     lines = lines.map((line: string) => {\n    //       return line.replace('/dev/cu.', '');\n    //     });\n    //     response = response.filter((device: any) => {\n    //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n    //     });\n    //   });\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'linux') {\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'win32') {\n    //   //Change\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n    return this.bluetoothDevices;\n  }\n  connectToDevice(id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.bluetoothDevices[id].connect();\n      // let platform = this.getOsAsObservable();\n      // if (platform === 'darwin') {\n      //   console.log(`blueutil --unpair ${address}`);\n      //   return new Promise((resolve, reject) => {\n      //     this.callCLICommand(`blueutil --unpair ${address}`)\n      //       .then(() => {\n      //         console.log(`blueutil --pair ${address}`);\n      //         return this.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n      //       })\n      //       .then(() => {\n      //         console.log(`blueutil --connect ${address}`);\n      //         return this.callCLICommand(\n      //           `sleep 2 && blueutil --connect ${address}`\n      //         );\n      //       })\n      //       .then(() => {\n      //         resolve({ done: true });\n      //         return 'done';\n      //       })\n      //       .catch(() => {\n      //         reject({ done: false });\n      //         return 'done';\n      //       });\n      //   });\n      // }\n      // //TODO\n      // else if (platform == 'linux') {\n      // }\n      // //TODO\n      // else if (platform == 'win32') {\n      // } else {\n      //   return new Promise((resolve, reject) => {\n      //     reject({ done: false });\n      //   });\n      // }\n    })();\n  }\n}\n\nBluetoothService.ɵfac = function BluetoothService_Factory(t) {\n  return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n};\nBluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BluetoothService,\n  factory: BluetoothService.ɵfac,\n  providedIn: 'root'\n});\nexport { BluetoothService };","map":{"version":3,"names":["BluetoothService","constructor","requiredModulesService","getOsAsObservable","os","platform","ble","bluetoothDevices","aux_this","setBLEScanning","deletePool","on","state","startScanning","console","log","stopScanning","key","Date","now","time","setTimeout","peripheral","getPeripheral","_this","_asyncToGenerator","advertisement","localName","txPowerLevel","serviceUuids","undefined","includes","id","name","getBluetoothDevices","connectToDevice","_this2","connect","i0","ɵɵinject","i1","RequiredModulesService","factory","ɵfac","providedIn"],"sources":["/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/src/app/services/bluetooth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { RequiredModulesService } from './required-modules.service';\n// import { Observable, bindNodeCallback } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BluetoothService {\n  getOsAsObservable = this.requiredModulesService.os.platform;\n  // serial = this.requiredModulesService.serial;\n  ble = this.requiredModulesService.ble;\n  bluetoothDevices: any = {};\n\n  constructor(private requiredModulesService: RequiredModulesService) {\n    let aux_this = this;\n    this.setBLEScanning();\n    this.deletePool();\n    this.ble.on('stateChange', function (state: any) {\n      if (state === 'poweredOn') {\n        aux_this.ble.startScanning([], true);\n      } else {\n        console.log('Stopped');\n        aux_this.ble.stopScanning();\n      }\n    });\n  }\n\n  deletePool() {\n    for (let key in this.bluetoothDevices) {\n      if (Date.now() - this.bluetoothDevices[key].time > 4000) {\n        delete this.bluetoothDevices[key];\n      }\n    }\n    // console.log(this.bluetoothDevices);\n    setTimeout(() => {\n      this.deletePool();\n    }, 500);\n  }\n\n  setBLEScanning() {\n    let aux_this = this;\n    this.ble.on('discover', function (peripheral: any) {\n      aux_this.getPeripheral(peripheral);\n    });\n    this.ble.on('scanStop', function () {\n      //aux_this.ble.stopScanning();\n      console.log(aux_this.bluetoothDevices);\n    });\n    aux_this.bluetoothDevices = {};\n    aux_this.ble.startScanning();\n  }\n\n  async getPeripheral(peripheral: any) {\n    var advertisement = peripheral.advertisement;\n\n    var localName = advertisement.localName;\n    var txPowerLevel = advertisement.txPowerLevel;\n    var serviceUuids = advertisement.serviceUuids;\n\n    if (localName != undefined && serviceUuids != undefined) {\n      if (serviceUuids.includes('6e400001b5a3f393e0a9e50e24dcca9e')) {\n        this.bluetoothDevices[peripheral.id] = {\n          name: localName,\n          id: peripheral.id,\n          peripheral,\n          serviceUuids,\n          time: Date.now(),\n        };\n      }\n    }\n  }\n\n  // async callCLICommand(command: string) {\n  //   return new Promise((resolve, reject) => {\n  //     this.requiredModulesService.child_process.exec(\n  //       command,\n  //       (error: Error, stdout: string, stderr: string) => {\n  //         if (error) {\n  //           console.log(`error: ${error.message}`);\n  //           reject(error);\n  //         }\n  //         if (stderr) {\n  //           console.log(`stderr: ${stderr}`);\n  //           reject(stderr);\n  //         }\n  //         resolve(stdout);\n  //       }\n  //     );\n  //   });\n  // }\n\n  getBluetoothDevices() {\n    // let platform = this.getOsAsObservable();\n    // let response: any[] = [];\n    // if (platform === 'darwin') {\n    //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n    //     // console.log(data);\n    //     let lines = data.split('\\n');\n    //     for (let index = 0; index < lines.length; index++) {\n    //       let address = '';\n    //       let name = '';\n    //       let connected = false;\n    //       const element = lines[index];\n    //       if (element != '') {\n    //         address = element.split(',')[0].split('address: ')[1];\n    //         name = element.split(', name: \"')[1].split('\", ')[0];\n    //         connected =\n    //           element.split(', ')[1].split(', ')[0] != 'not connected';\n    //         response.push({ address, name, connected });\n    //       }\n    //     }\n    //   });\n\n    //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n    //     let lines: string[] = data.split('\\n');\n    //     lines = lines.map((line: string) => {\n    //       return line.replace('/dev/cu.', '');\n    //     });\n    //     response = response.filter((device: any) => {\n    //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n    //     });\n    //   });\n\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'linux') {\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'win32') {\n    //   //Change\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n\n    return this.bluetoothDevices;\n  }\n\n  async connectToDevice(id: string) {\n    this.bluetoothDevices[id].connect();\n    // let platform = this.getOsAsObservable();\n    // if (platform === 'darwin') {\n    //   console.log(`blueutil --unpair ${address}`);\n    //   return new Promise((resolve, reject) => {\n    //     this.callCLICommand(`blueutil --unpair ${address}`)\n    //       .then(() => {\n    //         console.log(`blueutil --pair ${address}`);\n    //         return this.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n    //       })\n    //       .then(() => {\n    //         console.log(`blueutil --connect ${address}`);\n    //         return this.callCLICommand(\n    //           `sleep 2 && blueutil --connect ${address}`\n    //         );\n    //       })\n    //       .then(() => {\n    //         resolve({ done: true });\n    //         return 'done';\n    //       })\n    //       .catch(() => {\n    //         reject({ done: false });\n    //         return 'done';\n    //       });\n    //   });\n    // }\n    // //TODO\n    // else if (platform == 'linux') {\n    // }\n    // //TODO\n    // else if (platform == 'win32') {\n    // } else {\n    //   return new Promise((resolve, reject) => {\n    //     reject({ done: false });\n    //   });\n    // }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}