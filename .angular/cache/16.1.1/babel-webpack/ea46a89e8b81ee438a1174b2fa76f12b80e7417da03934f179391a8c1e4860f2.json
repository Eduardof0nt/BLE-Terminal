{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Documents/GitHub/BLE Terminal/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n      // serial = this.requiredModulesService.serial;\n      this.noble = this.requiredModulesService.ble;\n      this.bluetoothDevices = {};\n      let aux_this = this;\n      function deviceDiscovered(peripheral) {\n        try {\n          aux_this.bluetoothDevices[peripheral['id']] = peripheral;\n          //console.log(peripheral);\n        } catch (error) {}\n        //console.log(aux_this.bluetoothDevices);\n      }\n\n      this.noble.on('discover', deviceDiscovered);\n      this.noble.startScanning();\n    }\n    // async callCLICommand(command: string) {\n    //   return new Promise((resolve, reject) => {\n    //     this.requiredModulesService.child_process.exec(\n    //       command,\n    //       (error: Error, stdout: string, stderr: string) => {\n    //         if (error) {\n    //           console.log(`error: ${error.message}`);\n    //           reject(error);\n    //         }\n    //         if (stderr) {\n    //           console.log(`stderr: ${stderr}`);\n    //           reject(stderr);\n    //         }\n    //         resolve(stdout);\n    //       }\n    //     );\n    //   });\n    // }\n    resetBluetoothDeviceList() {\n      this.noble.stopScanning();\n      this.bluetoothDevices = {};\n      this.noble.startScanning();\n    }\n    connectToDevice(id) {\n      return _asyncToGenerator(function* () {})();\n    } // this.bluetoothDevices[id].connect();\n    // let platform = this.getOsAsObservable();\n    // if (platform === 'darwin') {\n    //   console.log(`blueutil --unpair ${address}`);\n    //   return new Promise((resolve, reject) => {\n    //     this.callCLICommand(`blueutil --unpair ${address}`)\n    //       .then(() => {\n    //         console.log(`blueutil --pair ${address}`);\n    //         return this.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n    //       })\n    //       .then(() => {\n    //         console.log(`blueutil --connect ${address}`);\n    //         return this.callCLICommand(\n    //           `sleep 2 && blueutil --connect ${address}`\n    //         );\n    //       })\n    //       .then(() => {\n    //         resolve({ done: true });\n    //         return 'done';\n    //       })\n    //       .catch(() => {\n    //         reject({ done: false });\n    //         return 'done';\n    //       });\n    //   });\n    // }\n    // //TODO\n    // else if (platform == 'linux') {\n    // }\n    // //TODO\n    // else if (platform == 'win32') {\n    // } else {\n    //   return new Promise((resolve, reject) => {\n    //     reject({ done: false });\n    //   });\n    // }\n  }\n\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}