{"ast":null,"code":"/**\r\n * Limiting the function calls to be one call over a set amount of time (milliseconds).\r\n * @param {number} delay - The duration between function calls in Milliseconds.\r\n * @param {boolean} atBegin - Excute the first call immediately then debounce. Default is false.\r\n */\nfunction Debounce(delay, atBegin = false) {\n  if (delay < 0) {\n    console.warn('Limit should be zero or greater');\n  }\n  let timeout;\n  return (targetClass, functionName, descriptor) => {\n    const source = descriptor.value;\n    let inProgress = false;\n    descriptor.value = function (...args) {\n      if (atBegin && !inProgress) {\n        inProgress = true;\n        timeout = setTimeout(() => {\n          inProgress = false;\n        }, delay);\n        return source.call(this, ...args);\n      }\n      clearTimeout(timeout);\n      inProgress = true;\n      timeout = setTimeout(() => {\n        inProgress = false;\n        return source.call(this, ...args);\n      }, delay);\n    };\n  };\n}\n\n/**\r\n * Limiting the function calls to be one call over a set amount of time (milliseconds).\r\n * @param {number} delay - The duration between function calls in Milliseconds.\r\n */\nfunction Throttle(delay) {\n  if (delay < 0) {\n    console.warn('Limit should be zero or greater');\n  }\n  let lastFunc;\n  let lastTrigger;\n  return (targetClass, functionName, descriptor) => {\n    const source = descriptor.value;\n    descriptor.value = function (...args) {\n      if (!lastTrigger || delay - (Date.now() - lastTrigger) <= 0) {\n        source.call(this, ...args);\n        lastTrigger = Date.now();\n      } else {\n        clearTimeout(lastFunc);\n        lastFunc = setTimeout(() => {\n          source.call(this, ...args);\n          lastTrigger = Date.now();\n        }, delay - (Date.now() - lastTrigger));\n      }\n    };\n  };\n}\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { Debounce, Throttle };\n//# sourceMappingURL=angular-debounce-throttle.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}