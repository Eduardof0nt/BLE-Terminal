{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n    }\n    callCLICommand(command) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let response = '';\n        yield new Promise((resolve, reject) => {\n          _this.requiredModulesService.child_process.exec(command, (error, stdout, stderr) => {\n            if (error) {\n              console.log(`error: ${error.message}`);\n              reject(0);\n            }\n            if (stderr) {\n              console.log(`stderr: ${stderr}`);\n              reject(0);\n            }\n            console.log(stdout);\n            response = stdout;\n            resolve(0);\n          });\n        });\n        return response;\n      })();\n    }\n    getBluetoothDevices() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let platform = _this2.getOsAsObservable();\n        if (platform === 'darwin') {\n          return _this2.callCLICommand('blueutil --paired');\n        }\n        // else if (platform === 'linux') {\n        //   return this.callCLIAsObservable('bluetoothctl devices');\n        // } else if (platform === 'win32') {\n        //   return this.callCLIAsObservable('');\n        // }\n        return '';\n      })();\n    }\n  }\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}