{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/required-modules.service\";\nlet WebsocketService = /*#__PURE__*/(() => {\n  class WebsocketService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.ws = this.requiredModulesService.ws;\n      this.http = this.requiredModulesService.http;\n      this.serverPorts = {};\n      console.log(this.http);\n      this.server = this.http.createServer();\n      this.server.on('upgrade', function upgrade(request, socket, head) {\n        console.log(request);\n        console.log(socket);\n        console.log(head);\n        // This function is not defined on purpose. Implement it with your own logic.\n        // authenticate(request, function next(err, client) {\n        //   if (err || !client) {\n        //     socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n        //     socket.destroy();\n        //     return;\n        //   }\n        // });\n      });\n    }\n\n    newWebSocket(port) {\n      return new this.ws.WebSocketServer({\n        port: port,\n        perMessageDeflate: {\n          zlibDeflateOptions: {\n            // See zlib defaults.\n            chunkSize: 1024,\n            memLevel: 7,\n            level: 3\n          },\n          zlibInflateOptions: {\n            chunkSize: 10 * 1024\n          },\n          // Other options settable:\n          clientNoContextTakeover: true,\n          serverNoContextTakeover: true,\n          serverMaxWindowBits: 10,\n          // Below options specified as default values.\n          concurrencyLimit: 10,\n          threshold: 1024 // Size (in bytes) below which messages\n          // should not be compressed if context takeover is disabled.\n        }\n      });\n    }\n  }\n\n  WebsocketService.ɵfac = function WebsocketService_Factory(t) {\n    return new (t || WebsocketService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  WebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebsocketService,\n    factory: WebsocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return WebsocketService;\n})();\nexport { WebsocketService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}