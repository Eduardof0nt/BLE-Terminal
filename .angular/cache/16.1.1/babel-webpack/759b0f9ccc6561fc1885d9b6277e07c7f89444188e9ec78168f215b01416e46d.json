{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/bluetooth.service\";\nimport * as i2 from \"src/app/app.component\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SerialComponent_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \"row.timestamp\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4, \"row.data\");\n    i0.ɵɵelementEnd()();\n  }\n}\nlet SerialComponent = /*#__PURE__*/(() => {\n  class SerialComponent {\n    constructor(bluetoothService, appComponent, route, cdr) {\n      this.bluetoothService = bluetoothService;\n      this.appComponent = appComponent;\n      this.route = route;\n      this.cdr = cdr;\n      this.data = [];\n      this.recording = false;\n      this.loadSerial();\n    }\n    loadSerial() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.appComponent.electron.ipcRenderer.on('update-data', (event, serialData) => {\n          for (let i = _this.data.length; i < serialData.length; i++) {\n            _this.data.push({\n              ...serialData[i],\n              recording: _this.recording\n            });\n          }\n          console.log(_this.data);\n          _this.cdr.markForCheck();\n          return true;\n        });\n        // let deviceString = this.route.snapshot.paramMap.get('device') || '';\n        // console.log(deviceString);\n        // if (deviceString != '') {\n        //   this.device = JSON.parse(deviceString);\n        //   if (this.platform == 'darwin') {\n        //     console.log('/dev/cu.' + this.device.name.replace(' ', ''));\n        //     this.serial = new this.bluetoothService.serial.SerialPort({\n        //       path: '/dev/cu.' + this.device.name.replace(' ', ''),\n        //       baudRate: 9600,\n        //       // parser:\n        //       //   new this.bluetoothService.serial.SerialPort.parsers.Readline(\n        //       //     '\\n'\n        //       //   ),\n        //     });\n        //     let aux_this = this;\n        //     this.serial.on('open', function () {\n        //       console.log('-- Connection opened --');\n        //       aux_this.serial.on('data', function (data: any) {\n        //         console.log(data);\n        //         if (aux_this.recording) {\n        //           aux_this.data.push(data);\n        //         }\n        //       });\n        //     });\n        //   }\n        //   //TODO\n        //   else if (this.platform == 'linux') {\n        //   }\n        //   //TODO\n        //   else if (this.platform == 'win32') {\n        //   }\n        // } else {\n        //   this.appComponent.electron.ipcRenderer.sendSync(\n        //     'remove-serial-device',\n        //     this.device.address\n        //   );\n        // }\n      })();\n    }\n  }\n\n  SerialComponent.ɵfac = function SerialComponent_Factory(t) {\n    return new (t || SerialComponent)(i0.ɵɵdirectiveInject(i1.BluetoothService), i0.ɵɵdirectiveInject(i2.AppComponent), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  SerialComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SerialComponent,\n    selectors: [[\"app-serial\"]],\n    decls: 15,\n    vars: 1,\n    consts: [[1, \"main-container\"], [1, \"serial-container\"], [2, \"width\", \"300px\", \"text-align\", \"center\", \"font-weight\", \"bold\"], [2, \"width\", \"300px\", \"font-weight\", \"bold\"], [4, \"ngFor\", \"ngForOf\"], [1, \"data-send-container\"], [\"type\", \"text\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\"]],\n    template: function SerialComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"table\")(3, \"thead\")(4, \"tr\")(5, \"th\", 2);\n        i0.ɵɵtext(6, \" Timestamp \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"th\", 3);\n        i0.ɵɵtext(8, \"Data\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"tbody\");\n        i0.ɵɵtemplate(10, SerialComponent_tr_10_Template, 5, 0, \"tr\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 5);\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵtext(14, \"Send\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.data);\n      }\n    },\n    dependencies: [i4.NgForOf],\n    styles: [\".main-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%;height:100%}.main-container[_ngcontent-%COMP%]   .serial-container[_ngcontent-%COMP%]{display:flex;width:100%;height:calc(100% - 30px);overflow-y:scroll}.main-container[_ngcontent-%COMP%]   .serial-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{height:100%;width:100%}.main-container[_ngcontent-%COMP%]   .data-send-container[_ngcontent-%COMP%]{display:flex;width:100%;height:40px;color:beige;border:1px solid black;padding:5px}.main-container[_ngcontent-%COMP%]   .data-send-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:calc(100% - 110px)}.main-container[_ngcontent-%COMP%]   .data-send-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100px;margin-left:10px;vertical-align:middle}\"]\n  });\n  return SerialComponent;\n})();\nexport { SerialComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}