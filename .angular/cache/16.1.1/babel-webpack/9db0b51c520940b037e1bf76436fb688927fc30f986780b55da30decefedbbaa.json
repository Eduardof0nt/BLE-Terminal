{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/bluetooth.service\";\nimport * as i2 from \"src/app/app.component\";\nimport * as i3 from \"@angular/router\";\nlet SerialComponent = /*#__PURE__*/(() => {\n  class SerialComponent {\n    constructor(bluetoothService, appComponent, route) {\n      this.bluetoothService = bluetoothService;\n      this.appComponent = appComponent;\n      this.route = route;\n      this.platform = '';\n      this.serial = undefined;\n      this.platform = this.bluetoothService.getOsAsObservable();\n    }\n    loadSerial() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let deviceString = _this.route.snapshot.paramMap.get('device') || '';\n        console.log(deviceString);\n        if (deviceString != '') {\n          _this.device = JSON.parse(deviceString);\n          if (_this.platform == 'darwin') {\n            console.log('/dev/cu.' + _this.device.name.replace(' ', ''));\n            _this.serial = new _this.bluetoothService.serial.SerialPort({\n              path: '/dev/cu.' + _this.device.name.replace(' ', ''),\n              baudRate: 9600\n              // parser:\n              //   new this.bluetoothService.serial.SerialPort.parsers.Readline(\n              //     '\\n'\n              //   ),\n            });\n            // let aux_this = this;\n            // this.serial.on('open', function () {\n            //   console.log('-- Connection opened --');\n            //   aux_this.serial.on('data', function (data: any) {\n            //     console.log('Data received: ' + data);\n            //   });\n            // });\n          }\n          //TODO\n          else if (_this.platform == 'linux') {}\n          //TODO\n          else if (_this.platform == 'win32') {}\n        } else {\n          _this.appComponent.electron.ipcRenderer.sendSync('remove-serial-device', _this.device.address);\n        }\n      })();\n    }\n  }\n  SerialComponent.ɵfac = function SerialComponent_Factory(t) {\n    return new (t || SerialComponent)(i0.ɵɵdirectiveInject(i1.BluetoothService), i0.ɵɵdirectiveInject(i2.AppComponent), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  SerialComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SerialComponent,\n    selectors: [[\"app-serial\"]],\n    decls: 2,\n    vars: 0,\n    template: function SerialComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"serial works!\");\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return SerialComponent;\n})();\nexport { SerialComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}