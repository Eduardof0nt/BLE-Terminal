{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n      this.serial = this.requiredModulesService.serial;\n      this.ble = this.requiredModulesService.ble;\n      this.bluetoothDevices = [];\n      let aux_this = this;\n      this.ble.on('stateChange', function (state) {\n        if (state === 'poweredOn') {\n          aux_this.ble.startScanning();\n        } else {\n          aux_this.ble.stopScanning();\n        }\n      });\n      this.ble.on('discover', function (peripheral) {\n        // aux_this.bluetoothService.ble.stopScanning();\n        console.log('peripheral with ID ' + peripheral.id + ' found');\n        var advertisement = peripheral.advertisement;\n        var localName = advertisement.localName;\n        var txPowerLevel = advertisement.txPowerLevel;\n        var manufacturerData = advertisement.manufacturerData;\n        var serviceData = advertisement.serviceData;\n        var serviceUuids = advertisement.serviceUuids;\n        aux_this.bluetoothDevices.push([localName, txPowerLevel, serviceUuids, serviceData]);\n        console.log(aux_this.bluetoothDevices);\n        // if (localName) {\n        //   console.log('  Local Name        = ' + localName);\n        // }\n        // if (txPowerLevel) {\n        //   console.log('  TX Power Level    = ' + txPowerLevel);\n        // }\n        // if (manufacturerData) {\n        //   console.log(\n        //     '  Manufacturer Data = ' + manufacturerData.toString('hex')\n        //   );\n        // }\n        // if (serviceData) {\n        //   console.log(\n        //     '  Service Data      = ' + JSON.stringify(serviceData, null, 2)\n        //   );\n        // }\n        // if (serviceUuids) {\n        //   console.log('  Service UUIDs     = ' + serviceUuids);\n        // }\n        // console.log();\n        // explore(peripheral);\n      });\n    }\n\n    callCLICommand(command) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          _this.requiredModulesService.child_process.exec(command, (error, stdout, stderr) => {\n            if (error) {\n              console.log(`error: ${error.message}`);\n              reject(error);\n            }\n            if (stderr) {\n              console.log(`stderr: ${stderr}`);\n              reject(stderr);\n            }\n            resolve(stdout);\n          });\n        });\n      })();\n    }\n    getBluetoothDevices() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let platform = _this2.getOsAsObservable();\n        let response = [];\n        if (platform === 'darwin') {\n          yield _this2.callCLICommand('blueutil --paired').then(data => {\n            // console.log(data);\n            let lines = data.split('\\n');\n            for (let index = 0; index < lines.length; index++) {\n              let address = '';\n              let name = '';\n              let connected = false;\n              const element = lines[index];\n              if (element != '') {\n                address = element.split(',')[0].split('address: ')[1];\n                name = element.split(', name: \"')[1].split('\", ')[0];\n                connected = element.split(', ')[1].split(', ')[0] != 'not connected';\n                response.push({\n                  address,\n                  name,\n                  connected\n                });\n              }\n            }\n          });\n          yield _this2.callCLICommand('ls /dev/cu.*').then(data => {\n            let lines = data.split('\\n');\n            lines = lines.map(line => {\n              return line.replace('/dev/cu.', '');\n            });\n            response = response.filter(device => {\n              return lines.indexOf(device.name.replace(' ', '')) != -1;\n            });\n          });\n          return response;\n        }\n        //TODO\n        else if (platform === 'linux') {\n          yield _this2.callCLICommand('bluetoothctl devices').then(data => {\n            response = data;\n          });\n          return response;\n        }\n        //TODO\n        else if (platform === 'win32') {\n          //Change\n          yield _this2.callCLICommand('bluetoothctl devices').then(data => {\n            response = data;\n          });\n          return response;\n        }\n        return [];\n      })();\n    }\n    connectToDevice(address) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        let platform = _this3.getOsAsObservable();\n        if (platform === 'darwin') {\n          console.log(`blueutil --unpair ${address}`);\n          return new Promise((resolve, reject) => {\n            _this3.callCLICommand(`blueutil --unpair ${address}`).then(() => {\n              console.log(`blueutil --pair ${address}`);\n              return _this3.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n            }).then(() => {\n              console.log(`blueutil --connect ${address}`);\n              return _this3.callCLICommand(`sleep 2 && blueutil --connect ${address}`);\n            }).then(() => {\n              resolve({\n                done: true\n              });\n              return 'done';\n            }).catch(() => {\n              reject({\n                done: false\n              });\n              return 'done';\n            });\n          });\n        }\n        //TODO\n        else if (platform == 'linux') {}\n        //TODO\n        else if (platform == 'win32') {} else {\n          return new Promise((resolve, reject) => {\n            reject({\n              done: false\n            });\n          });\n        }\n      })();\n    }\n  }\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}