{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n      this.serial = this.requiredModulesService.serial;\n      this.ble = this.requiredModulesService.ble;\n      this.bluetoothDevices = {};\n      let aux_this = this;\n      this.setBLEScanning();\n      this.deletePool();\n      this.ble.on('stateChange', function (state) {\n        if (state === 'poweredOn') {\n          aux_this.ble.startScanning([], true);\n        } else {\n          console.log('Stopped');\n          aux_this.ble.stopScanning();\n        }\n      });\n    }\n    deletePool() {\n      for (let key in this.bluetoothDevices) {\n        if (Date.now() - this.bluetoothDevices[key].time > 4000) {\n          delete this.bluetoothDevices[key];\n        }\n      }\n      // console.log(this.bluetoothDevices);\n      setTimeout(() => {\n        this.deletePool();\n      }, 500);\n    }\n    setBLEScanning() {\n      let aux_this = this;\n      this.ble.on('discover', function (peripheral) {\n        aux_this.getPeripheral(peripheral);\n      });\n      this.ble.on('scanStop', function () {\n        //aux_this.ble.stopScanning();\n        console.log(aux_this.bluetoothDevices);\n      });\n      aux_this.bluetoothDevices = {};\n      aux_this.ble.startScanning();\n    }\n    getPeripheral(peripheral) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var advertisement = peripheral.advertisement;\n        var localName = advertisement.localName;\n        var txPowerLevel = advertisement.txPowerLevel;\n        var serviceUuids = advertisement.serviceUuids;\n        if (localName != undefined\n        // serviceUuids != undefined &&\n        // txPowerLevel != undefined\n        ) {\n          _this.bluetoothDevices[peripheral.id] = {\n            name: localName,\n            id: peripheral.id,\n            peripheral,\n            txPowerLevel,\n            serviceUuids,\n            time: Date.now()\n          };\n        }\n      })();\n    }\n    callCLICommand(command) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          _this2.requiredModulesService.child_process.exec(command, (error, stdout, stderr) => {\n            if (error) {\n              console.log(`error: ${error.message}`);\n              reject(error);\n            }\n            if (stderr) {\n              console.log(`stderr: ${stderr}`);\n              reject(stderr);\n            }\n            resolve(stdout);\n          });\n        });\n      })();\n    }\n    getBluetoothDevices() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        // let platform = this.getOsAsObservable();\n        // let response: any[] = [];\n        // if (platform === 'darwin') {\n        //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n        //     // console.log(data);\n        //     let lines = data.split('\\n');\n        //     for (let index = 0; index < lines.length; index++) {\n        //       let address = '';\n        //       let name = '';\n        //       let connected = false;\n        //       const element = lines[index];\n        //       if (element != '') {\n        //         address = element.split(',')[0].split('address: ')[1];\n        //         name = element.split(', name: \"')[1].split('\", ')[0];\n        //         connected =\n        //           element.split(', ')[1].split(', ')[0] != 'not connected';\n        //         response.push({ address, name, connected });\n        //       }\n        //     }\n        //   });\n        //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n        //     let lines: string[] = data.split('\\n');\n        //     lines = lines.map((line: string) => {\n        //       return line.replace('/dev/cu.', '');\n        //     });\n        //     response = response.filter((device: any) => {\n        //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n        //     });\n        //   });\n        //   return response;\n        // }\n        // //TODO\n        // else if (platform === 'linux') {\n        //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n        //     response = data;\n        //   });\n        //   return response;\n        // }\n        // //TODO\n        // else if (platform === 'win32') {\n        //   //Change\n        //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n        //     response = data;\n        //   });\n        //   return response;\n        // }\n        return _this3.bluetoothDevices;\n      })();\n    }\n    connectToDevice(address) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        let platform = _this4.getOsAsObservable();\n        if (platform === 'darwin') {\n          console.log(`blueutil --unpair ${address}`);\n          return new Promise((resolve, reject) => {\n            _this4.callCLICommand(`blueutil --unpair ${address}`).then(() => {\n              console.log(`blueutil --pair ${address}`);\n              return _this4.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n            }).then(() => {\n              console.log(`blueutil --connect ${address}`);\n              return _this4.callCLICommand(`sleep 2 && blueutil --connect ${address}`);\n            }).then(() => {\n              resolve({\n                done: true\n              });\n              return 'done';\n            }).catch(() => {\n              reject({\n                done: false\n              });\n              return 'done';\n            });\n          });\n        }\n        //TODO\n        else if (platform == 'linux') {}\n        //TODO\n        else if (platform == 'win32') {} else {\n          return new Promise((resolve, reject) => {\n            reject({\n              done: false\n            });\n          });\n        }\n      })();\n    }\n  }\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}