{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/bluetooth.service\";\nimport * as i2 from \"src/app/app.component\";\nimport * as i3 from \"@angular/router\";\nlet SerialComponent = /*#__PURE__*/(() => {\n  class SerialComponent {\n    constructor(bluetoothService, appComponent, route) {\n      this.bluetoothService = bluetoothService;\n      this.appComponent = appComponent;\n      this.route = route;\n      this.platform = '';\n      this.serial = undefined;\n      this.data = [];\n      this.recording = false;\n      this.platform = this.bluetoothService.getOsAsObservable();\n      this.loadSerial();\n    }\n    loadSerial() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.appComponent.electron.ipcRenderer.on('update-data', (event, serialData) => {\n          _this.data = serialData;\n          console.log(_this.data);\n          return true;\n        });\n        // let deviceString = this.route.snapshot.paramMap.get('device') || '';\n        // console.log(deviceString);\n        // if (deviceString != '') {\n        //   this.device = JSON.parse(deviceString);\n        //   if (this.platform == 'darwin') {\n        //     console.log('/dev/cu.' + this.device.name.replace(' ', ''));\n        //     this.serial = new this.bluetoothService.serial.SerialPort({\n        //       path: '/dev/cu.' + this.device.name.replace(' ', ''),\n        //       baudRate: 9600,\n        //       // parser:\n        //       //   new this.bluetoothService.serial.SerialPort.parsers.Readline(\n        //       //     '\\n'\n        //       //   ),\n        //     });\n        //     let aux_this = this;\n        //     this.serial.on('open', function () {\n        //       console.log('-- Connection opened --');\n        //       aux_this.serial.on('data', function (data: any) {\n        //         console.log(data);\n        //         if (aux_this.recording) {\n        //           aux_this.data.push(data);\n        //         }\n        //       });\n        //     });\n        //   }\n        //   //TODO\n        //   else if (this.platform == 'linux') {\n        //   }\n        //   //TODO\n        //   else if (this.platform == 'win32') {\n        //   }\n        // } else {\n        //   this.appComponent.electron.ipcRenderer.sendSync(\n        //     'remove-serial-device',\n        //     this.device.address\n        //   );\n        // }\n      })();\n    }\n  }\n\n  SerialComponent.ɵfac = function SerialComponent_Factory(t) {\n    return new (t || SerialComponent)(i0.ɵɵdirectiveInject(i1.BluetoothService), i0.ɵɵdirectiveInject(i2.AppComponent), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  SerialComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SerialComponent,\n    selectors: [[\"app-serial\"]],\n    decls: 0,\n    vars: 0,\n    template: function SerialComponent_Template(rf, ctx) {}\n  });\n  return SerialComponent;\n})();\nexport { SerialComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}