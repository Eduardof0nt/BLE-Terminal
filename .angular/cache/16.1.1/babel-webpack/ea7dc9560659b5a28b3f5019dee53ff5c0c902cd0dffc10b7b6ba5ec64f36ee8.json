{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nclass BluetoothService {\n  constructor(requiredModulesService) {\n    this.requiredModulesService = requiredModulesService;\n    this.getOsAsObservable = this.requiredModulesService.os.platform;\n    this.serial = this.requiredModulesService.serial;\n    this.ble = this.requiredModulesService.ble;\n  }\n  callCLICommand(command) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.requiredModulesService.child_process.exec(command, (error, stdout, stderr) => {\n          if (error) {\n            console.log(`error: ${error.message}`);\n            reject(error);\n          }\n          if (stderr) {\n            console.log(`stderr: ${stderr}`);\n            reject(stderr);\n          }\n          resolve(stdout);\n        });\n      });\n    })();\n  }\n  getBluetoothDevices() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let platform = _this2.getOsAsObservable();\n      let response = [];\n      console.log(_this2.ble);\n      const {\n        bluetooth,\n        destroy\n      } = _this2.ble.createBluetooth();\n      const adapter = yield bluetooth.defaultAdapter();\n      if (!(yield adapter.isDiscovering())) {\n        console.log(yield adapter.startDiscovery());\n      }\n      // if (platform === 'darwin') {\n      //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n      //     // console.log(data);\n      //     let lines = data.split('\\n');\n      //     for (let index = 0; index < lines.length; index++) {\n      //       let address = '';\n      //       let name = '';\n      //       let connected = false;\n      //       const element = lines[index];\n      //       if (element != '') {\n      //         address = element.split(',')[0].split('address: ')[1];\n      //         name = element.split(', name: \"')[1].split('\", ')[0];\n      //         connected =\n      //           element.split(', ')[1].split(', ')[0] != 'not connected';\n      //         response.push({ address, name, connected });\n      //       }\n      //     }\n      //   });\n      //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n      //     let lines: string[] = data.split('\\n');\n      //     lines = lines.map((line: string) => {\n      //       return line.replace('/dev/cu.', '');\n      //     });\n      //     response = response.filter((device: any) => {\n      //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n      //     });\n      //   });\n      //   return response;\n      // }\n      // //TODO\n      // else if (platform === 'linux') {\n      //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n      //     response = data;\n      //   });\n      //   return response;\n      // }\n      // //TODO\n      // else if (platform === 'win32') {\n      //   //Change\n      //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n      //     response = data;\n      //   });\n      //   return response;\n      // }\n      return [];\n    })();\n  }\n  connectToDevice(address) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let platform = _this3.getOsAsObservable();\n      if (platform === 'darwin') {\n        console.log(`blueutil --unpair ${address}`);\n        return new Promise((resolve, reject) => {\n          _this3.callCLICommand(`blueutil --unpair ${address}`).then(() => {\n            console.log(`blueutil --pair ${address}`);\n            return _this3.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n          }).then(() => {\n            console.log(`blueutil --connect ${address}`);\n            return _this3.callCLICommand(`sleep 2 && blueutil --connect ${address}`);\n          }).then(() => {\n            resolve({\n              done: true\n            });\n            return 'done';\n          }).catch(() => {\n            reject({\n              done: false\n            });\n            return 'done';\n          });\n        });\n      }\n      //TODO\n      else if (platform == 'linux') {}\n      //TODO\n      else if (platform == 'win32') {} else {\n        return new Promise((resolve, reject) => {\n          reject({\n            done: false\n          });\n        });\n      }\n    })();\n  }\n}\nBluetoothService.ɵfac = function BluetoothService_Factory(t) {\n  return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n};\nBluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BluetoothService,\n  factory: BluetoothService.ɵfac,\n  providedIn: 'root'\n});\nexport { BluetoothService };","map":{"version":3,"names":["BluetoothService","constructor","requiredModulesService","getOsAsObservable","os","platform","serial","ble","callCLICommand","command","_this","_asyncToGenerator","Promise","resolve","reject","child_process","exec","error","stdout","stderr","console","log","message","getBluetoothDevices","_this2","response","bluetooth","destroy","createBluetooth","adapter","defaultAdapter","isDiscovering","startDiscovery","connectToDevice","address","_this3","then","done","catch","i0","ɵɵinject","i1","RequiredModulesService","factory","ɵfac","providedIn"],"sources":["/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/src/app/services/bluetooth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { RequiredModulesService } from './required-modules.service';\n// import { Observable, bindNodeCallback } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BluetoothService {\n  getOsAsObservable = this.requiredModulesService.os.platform;\n  serial = this.requiredModulesService.serial;\n  ble = this.requiredModulesService.ble;\n  constructor(private requiredModulesService: RequiredModulesService) {}\n\n  async callCLICommand(command: string) {\n    return new Promise((resolve, reject) => {\n      this.requiredModulesService.child_process.exec(\n        command,\n        (error: Error, stdout: string, stderr: string) => {\n          if (error) {\n            console.log(`error: ${error.message}`);\n            reject(error);\n          }\n          if (stderr) {\n            console.log(`stderr: ${stderr}`);\n            reject(stderr);\n          }\n          resolve(stdout);\n        }\n      );\n    });\n  }\n\n  async getBluetoothDevices() {\n    let platform = this.getOsAsObservable();\n    let response: any[] = [];\n    console.log(this.ble);\n    const { bluetooth, destroy } = this.ble.createBluetooth();\n    const adapter = await bluetooth.defaultAdapter();\n    if (!(await adapter.isDiscovering())) {\n      console.log(await adapter.startDiscovery());\n    }\n    // if (platform === 'darwin') {\n    //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n    //     // console.log(data);\n    //     let lines = data.split('\\n');\n    //     for (let index = 0; index < lines.length; index++) {\n    //       let address = '';\n    //       let name = '';\n    //       let connected = false;\n    //       const element = lines[index];\n    //       if (element != '') {\n    //         address = element.split(',')[0].split('address: ')[1];\n    //         name = element.split(', name: \"')[1].split('\", ')[0];\n    //         connected =\n    //           element.split(', ')[1].split(', ')[0] != 'not connected';\n    //         response.push({ address, name, connected });\n    //       }\n    //     }\n    //   });\n\n    //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n    //     let lines: string[] = data.split('\\n');\n    //     lines = lines.map((line: string) => {\n    //       return line.replace('/dev/cu.', '');\n    //     });\n    //     response = response.filter((device: any) => {\n    //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n    //     });\n    //   });\n\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'linux') {\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n    // //TODO\n    // else if (platform === 'win32') {\n    //   //Change\n    //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n    //     response = data;\n    //   });\n    //   return response;\n    // }\n    return [];\n  }\n\n  async connectToDevice(address: string) {\n    let platform = this.getOsAsObservable();\n    if (platform === 'darwin') {\n      console.log(`blueutil --unpair ${address}`);\n      return new Promise((resolve, reject) => {\n        this.callCLICommand(`blueutil --unpair ${address}`)\n          .then(() => {\n            console.log(`blueutil --pair ${address}`);\n            return this.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n          })\n          .then(() => {\n            console.log(`blueutil --connect ${address}`);\n            return this.callCLICommand(\n              `sleep 2 && blueutil --connect ${address}`\n            );\n          })\n          .then(() => {\n            resolve({ done: true });\n            return 'done';\n          })\n          .catch(() => {\n            reject({ done: false });\n            return 'done';\n          });\n      });\n    }\n    //TODO\n    else if (platform == 'linux') {\n    }\n    //TODO\n    else if (platform == 'win32') {\n    } else {\n      return new Promise((resolve, reject) => {\n        reject({ done: false });\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}