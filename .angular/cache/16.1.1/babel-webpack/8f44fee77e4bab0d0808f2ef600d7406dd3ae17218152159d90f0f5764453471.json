{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      // callCLIAsObservable = bindNodeCallback(\n      //   (\n      //     args: string,\n      //     callback: (error: Error, stdout: string, stderr: string) => void\n      //   ) => this.requiredModulesService.exec(args, callback)\n      // );\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n    }\n    getBluetoothDevices() {\n      let platform = this.getOsAsObservable();\n      if (platform === 'darwin') {\n        console.log(this.requiredModulesService.child_process);\n        this.requiredModulesService.child_process.exec('blueutil --paired', (error, stdout, stderr) => {\n          if (error) {\n            console.log(`error: ${error.message}`);\n            return;\n          }\n          if (stderr) {\n            console.log(`stderr: ${stderr}`);\n            return;\n          }\n          console.log(`stdout: ${stdout}`);\n        });\n      }\n      // else if (platform === 'linux') {\n      //   return this.callCLIAsObservable('bluetoothctl devices');\n      // } else if (platform === 'win32') {\n      //   return this.callCLIAsObservable('');\n      // }\n      return '';\n    }\n  }\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}