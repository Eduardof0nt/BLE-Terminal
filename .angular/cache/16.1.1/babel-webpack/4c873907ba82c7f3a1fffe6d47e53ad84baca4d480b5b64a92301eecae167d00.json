{"ast":null,"code":"import _asyncToGenerator from \"/Users/eduardo/Dropbox/Development/JavaScript/Node/Electron/bluetooth-serial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./required-modules.service\";\n// import { Observable, bindNodeCallback } from 'rxjs';\nlet BluetoothService = /*#__PURE__*/(() => {\n  class BluetoothService {\n    constructor(requiredModulesService) {\n      this.requiredModulesService = requiredModulesService;\n      this.getOsAsObservable = this.requiredModulesService.os.platform;\n      // serial = this.requiredModulesService.serial;\n      this.noble = this.requiredModulesService.ble;\n      this.bluetoothDevices = {};\n      this.noble.on('discover', this.deviceDiscovered);\n      this.noble.startScanning();\n    }\n    deviceDiscovered(peripheral) {\n      console.log(peripheral);\n      // this.bluetoothDevices[peripheral['id']] = peripheral;\n      // console.log(this.bluetoothDevices);\n    }\n    // async callCLICommand(command: string) {\n    //   return new Promise((resolve, reject) => {\n    //     this.requiredModulesService.child_process.exec(\n    //       command,\n    //       (error: Error, stdout: string, stderr: string) => {\n    //         if (error) {\n    //           console.log(`error: ${error.message}`);\n    //           reject(error);\n    //         }\n    //         if (stderr) {\n    //           console.log(`stderr: ${stderr}`);\n    //           reject(stderr);\n    //         }\n    //         resolve(stdout);\n    //       }\n    //     );\n    //   });\n    // }\n    getBluetoothDevices() {\n      // let platform = this.getOsAsObservable();\n      // let response: any[] = [];\n      // if (platform === 'darwin') {\n      //   await this.callCLICommand('blueutil --paired').then((data: any) => {\n      //     // console.log(data);\n      //     let lines = data.split('\\n');\n      //     for (let index = 0; index < lines.length; index++) {\n      //       let address = '';\n      //       let name = '';\n      //       let connected = false;\n      //       const element = lines[index];\n      //       if (element != '') {\n      //         address = element.split(',')[0].split('address: ')[1];\n      //         name = element.split(', name: \"')[1].split('\", ')[0];\n      //         connected =\n      //           element.split(', ')[1].split(', ')[0] != 'not connected';\n      //         response.push({ address, name, connected });\n      //       }\n      //     }\n      //   });\n      //   await this.callCLICommand('ls /dev/cu.*').then((data: any) => {\n      //     let lines: string[] = data.split('\\n');\n      //     lines = lines.map((line: string) => {\n      //       return line.replace('/dev/cu.', '');\n      //     });\n      //     response = response.filter((device: any) => {\n      //       return lines.indexOf(device.name.replace(' ', '')) != -1;\n      //     });\n      //   });\n      //   return response;\n      // }\n      // //TODO\n      // else if (platform === 'linux') {\n      //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n      //     response = data;\n      //   });\n      //   return response;\n      // }\n      // //TODO\n      // else if (platform === 'win32') {\n      //   //Change\n      //   await this.callCLICommand('bluetoothctl devices').then((data: any) => {\n      //     response = data;\n      //   });\n      //   return response;\n      // }\n      return this.bluetoothDevices;\n    }\n    connectToDevice(id) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.bluetoothDevices[id].connect();\n        // let platform = this.getOsAsObservable();\n        // if (platform === 'darwin') {\n        //   console.log(`blueutil --unpair ${address}`);\n        //   return new Promise((resolve, reject) => {\n        //     this.callCLICommand(`blueutil --unpair ${address}`)\n        //       .then(() => {\n        //         console.log(`blueutil --pair ${address}`);\n        //         return this.callCLICommand(`sleep 2 && blueutil --pair ${address}`);\n        //       })\n        //       .then(() => {\n        //         console.log(`blueutil --connect ${address}`);\n        //         return this.callCLICommand(\n        //           `sleep 2 && blueutil --connect ${address}`\n        //         );\n        //       })\n        //       .then(() => {\n        //         resolve({ done: true });\n        //         return 'done';\n        //       })\n        //       .catch(() => {\n        //         reject({ done: false });\n        //         return 'done';\n        //       });\n        //   });\n        // }\n        // //TODO\n        // else if (platform == 'linux') {\n        // }\n        // //TODO\n        // else if (platform == 'win32') {\n        // } else {\n        //   return new Promise((resolve, reject) => {\n        //     reject({ done: false });\n        //   });\n        // }\n      })();\n    }\n  }\n\n  BluetoothService.ɵfac = function BluetoothService_Factory(t) {\n    return new (t || BluetoothService)(i0.ɵɵinject(i1.RequiredModulesService));\n  };\n  BluetoothService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BluetoothService,\n    factory: BluetoothService.ɵfac,\n    providedIn: 'root'\n  });\n  return BluetoothService;\n})();\nexport { BluetoothService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}